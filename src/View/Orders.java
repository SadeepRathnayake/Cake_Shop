package View;

import Controller.Iorder;
import Controller.OrderImpl;
import Model.Order;
import Util.databaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sadeep
 */
public class Orders extends javax.swing.JFrame {

    PreparedStatement pst;
    ResultSet rs;
    private Connection con;
    
    /**
     * Creates new form Orders
     */
    public Orders() {
        initComponents();
        
        try {
            con = databaseConnection.getDBConnection(); // Initialize the database connection
            table_load();

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error: Unable to connect to the database.");
	}
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        CLEARbutton = new javax.swing.JButton();
        DELETEbutton = new javax.swing.JButton();
        UPDATEbutton = new javax.swing.JButton();
        INSERTbutton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        customerIdTXT = new javax.swing.JTextField();
        quantityTXT = new javax.swing.JTextField();
        cakeItemsCOMBOBOX = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        backButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        jLabel6.setText("Order Details");

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Customer Name", "Cake Item", "Quantity", "Unit Price", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        orderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(orderTable);

        CLEARbutton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CLEARbutton.setText("CLEAR");
        CLEARbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLEARbuttonActionPerformed(evt);
            }
        });

        DELETEbutton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        DELETEbutton.setText("DELETE");
        DELETEbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETEbuttonActionPerformed(evt);
            }
        });

        UPDATEbutton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        UPDATEbutton.setText("UPDATE");
        UPDATEbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPDATEbuttonActionPerformed(evt);
            }
        });

        INSERTbutton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        INSERTbutton.setText("INSERT");
        INSERTbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                INSERTbuttonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Customer ID");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("Cake Item");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText("Quantity");

        cakeItemsCOMBOBOX.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select an Item", "Birthday Cake", "Chocolate Cake", "Cupcake", "Red Velvet Cake" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton)
                .addGap(59, 59, 59))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(quantityTXT)
                                    .addComponent(customerIdTXT)
                                    .addComponent(cakeItemsCOMBOBOX, 0, 151, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DELETEbutton)
                            .addComponent(INSERTbutton))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(UPDATEbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CLEARbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel6)
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(customerIdTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cakeItemsCOMBOBOX))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(quantityTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(INSERTbutton)
                            .addComponent(UPDATEbutton))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DELETEbutton)
                    .addComponent(CLEARbutton))
                .addGap(18, 18, 18)
                .addComponent(backButton)
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(885, 411));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        Dashboard Frame = new Dashboard();
        Frame.setVisible(true);
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void orderTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderTableMouseClicked
    // Get the selected row index
    int rowIndex = orderTable.getSelectedRow();

    // Check if a row is selected
    if (rowIndex != -1) {
        // Get the model from the table
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();

        // Retrieve data from the selected row
        String customerName = (String) model.getValueAt(rowIndex, 1); // Assuming Customer Name is at column index 1
        String cakeItem = (String) model.getValueAt(rowIndex, 2); // Assuming Cake Item is at column index 2
        String quantity = (String) model.getValueAt(rowIndex, 3); // Assuming Quantity is at column index 3

        // Populate the fields with the retrieved data
        customerIdTXT.setText(getCustomerID(customerName)); // Set the Customer ID using the retrieved Customer Name
        quantityTXT.setText(quantity);
        // Set the selected cake item in the combo box
        cakeItemsCOMBOBOX.setSelectedItem(cakeItem);
    }
    }//GEN-LAST:event_orderTableMouseClicked

    private void INSERTbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_INSERTbuttonActionPerformed
    // INSERT OPERATION

    String customerId, cakeItem, quantity, customerName;

    // Retrieve data from UI components
    customerId = customerIdTXT.getText();
    cakeItem = (String) cakeItemsCOMBOBOX.getSelectedItem();
    quantity = quantityTXT.getText();
    customerName = getCustomerName(customerId);

    // Check if any required field is empty
    if (customerId.isEmpty() || (cakeItem.equals("Select an Item") || cakeItem == null) || quantity.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all the required fields.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validate quantity (assuming it should be a positive integer)
    try {
        int quantityValue = Integer.parseInt(quantity);
        if (quantityValue <= 0) {
            JOptionPane.showMessageDialog(this, "Please enter a valid quantity (positive integer).", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Please enter a valid quantity (positive integer).", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Check if the entered customer ID exists in the database
    boolean isValidCustomer = checkCustomerID(customerId);
    if (!isValidCustomer) {
        JOptionPane.showMessageDialog(this, "Invalid customer ID. Please enter a valid customer ID.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Define unit prices
    double unitPrice = 0;
    switch (cakeItem) {
        case "Birthday Cake":
            unitPrice = 1500.00;
            break;
        case "Chocolate Cake":
            unitPrice = 2000.00;
            break;
        case "Cupcake":
            unitPrice = 250.00;
            break;
        case "Red Velvet Cake":
            unitPrice = 3000.00;
            break;
        default:
            break;
    }

    // Calculate total
    double total = unitPrice * Integer.parseInt(quantity);

    // Create a new order object
    Order newOrder = new Order();
    newOrder.setCus_Name(customerName);
    newOrder.setOdr_Item(cakeItem);
    newOrder.setOdr_Quantity(quantity);
    newOrder.setOdr_unitPrice(String.format("%.2f", unitPrice)); // Format unit price to two decimal places
    newOrder.setOdr_Total(String.format("%.2f", total)); // Format total to two decimal places

    try {
        PreparedStatement pst = con.prepareStatement(
            "INSERT INTO orders (Customer_Name, Cake_Item, Quantity, Unit_Price, Total) VALUES (?, ?, ?, ?, ?)"
        );

        pst.setString(1, newOrder.getCus_Name());
        pst.setString(2, newOrder.getOdr_Item());
        pst.setString(3, newOrder.getOdr_Quantity());
        pst.setString(4, newOrder.getOdr_unitPrice());
        pst.setString(5, newOrder.getOdr_Total());

        int rowsInserted = pst.executeUpdate();

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Order added successfully!");

            // Refresh the table with new data
            table_load();

            // Clear input fields after successful insertion
            clearFields();

        } else {
            JOptionPane.showMessageDialog(this, "Failed to add order.");
        }
    } catch (SQLException ex) {
        Logger.getLogger(Orders.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    }//GEN-LAST:event_INSERTbuttonActionPerformed

    private void UPDATEbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPDATEbuttonActionPerformed
        // UPDATE OPERATION

        String customerId, cakeItem, quantity, orderId, customerName;

        // Retrieve data from UI components
        customerId = customerIdTXT.getText();
        cakeItem = (String) cakeItemsCOMBOBOX.getSelectedItem();
        quantity = quantityTXT.getText();
        customerName = getCustomerName(customerId);

        // Check if any required field is empty
        if (customerId.isEmpty() || (cakeItem.equals("Select an Item") || cakeItem == null) || quantity.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all the required fields.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
        }

        // Validate quantity (assuming it should be a positive integer)
        try {
            int quantityValue = Integer.parseInt(quantity);
            if (quantityValue <= 0) {
                JOptionPane.showMessageDialog(this, "Please enter a valid quantity (positive integer).", "Error", JOptionPane.ERROR_MESSAGE);
            return;
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please enter a valid quantity (positive integer).", "Error", JOptionPane.ERROR_MESSAGE);
        return;
        }
        
        // Check if the entered customer ID exists in the database
        boolean isValidCustomer = checkCustomerID(customerId);
        if (!isValidCustomer) {
        JOptionPane.showMessageDialog(this, "Invalid customer ID. Please enter a valid customer ID.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
        }

        // Define unit prices
        Double unitPrice = null;
        switch (cakeItem) {
            case "Birthday Cake":
                unitPrice = 1500.00;
                break;
            case "Chocolate Cake":
                unitPrice = 2000.00;
                break;
            case "Cupcake":
                unitPrice = 250.00;
                break;
            case "Red Velvet Cake":
                unitPrice = 3000.00;
                break;
            default:
                break;
        }

        // Check if the cake item was not selected
        if (unitPrice == null) {
            JOptionPane.showMessageDialog(this, "Please select a valid cake item.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Calculate total
        double total = unitPrice * Integer.parseInt(quantity);

        // Get the selected row index
        int selectedRowIndex = orderTable.getSelectedRow();

        // Check if a row is selected
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select an order to update.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Retrieve order ID from the selected row
        orderId = orderTable.getValueAt(selectedRowIndex, 0).toString();

        // Create a new order object
        Order updatedOrder = new Order();
        updatedOrder.setOdr_ID(orderId);
        updatedOrder.setCus_Name(customerName);
        updatedOrder.setOdr_Item(cakeItem);
        updatedOrder.setOdr_Quantity(quantity);
        updatedOrder.setOdr_unitPrice(String.format("%.2f", unitPrice)); // Format unit price to two decimal places
        updatedOrder.setOdr_Total(String.format("%.2f", total)); // Format total to two decimal places

        try {
            PreparedStatement pst = con.prepareStatement(
                "UPDATE orders SET Customer_Name = ?, Cake_Item = ?, Quantity = ?, Unit_Price = ?, Total = ? WHERE Order_ID = ?"
            );

            pst.setString(1, updatedOrder.getCus_Name());
            pst.setString(2, updatedOrder.getOdr_Item());
            pst.setString(3, updatedOrder.getOdr_Quantity());
            pst.setString(4, updatedOrder.getOdr_unitPrice());
            pst.setString(5, updatedOrder.getOdr_Total());
            pst.setString(6, updatedOrder.getOdr_ID());

            int rowsUpdated = pst.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Order updated successfully!");

                // Refresh the table with new data
                table_load();

                // Clear input fields after successful update
                clearFields();

            } else {
                JOptionPane.showMessageDialog(this, "Failed to update order.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Orders.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }

    }//GEN-LAST:event_UPDATEbuttonActionPerformed

    private void DELETEbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETEbuttonActionPerformed
        // DELETE OPERATION

        // Get the selected row index from the table
        int selectedRow = orderTable.getSelectedRow();

        // Check if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an order to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the order ID from the selected row
        String orderId = orderTable.getValueAt(selectedRow, 0).toString(); // Assuming order ID is in the first column

        // Ask for confirmation before deleting
        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this order?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            try {
                // Prepare the SQL statement to delete the order record
                PreparedStatement pst = con.prepareStatement("DELETE FROM orders WHERE Order_ID = ?");
                pst.setString(1, orderId);

                // Execute the SQL statement
                int rowsDeleted = pst.executeUpdate();

                if (rowsDeleted > 0) {
                    JOptionPane.showMessageDialog(this, "Order deleted successfully!");
                    // Refresh the table with updated data
                    table_load();
                    
                    clearFields();
                    
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete order.");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Orders.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_DELETEbuttonActionPerformed

    private void CLEARbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLEARbuttonActionPerformed
        clearFields();
    }//GEN-LAST:event_CLEARbuttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Orders().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLEARbutton;
    private javax.swing.JButton DELETEbutton;
    private javax.swing.JButton INSERTbutton;
    private javax.swing.JButton UPDATEbutton;
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> cakeItemsCOMBOBOX;
    private javax.swing.JTextField customerIdTXT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable orderTable;
    private javax.swing.JTextField quantityTXT;
    // End of variables declaration//GEN-END:variables

    // Method to load data into the table
    public void table_load(){

    Iorder orderImpl = new OrderImpl();
       	ArrayList<Order> orderList = orderImpl.getAllOrder();

	// Convert the ArrayList to a DefaultTableModel
	DefaultTableModel model = new DefaultTableModel();
	model.addColumn("Order ID");
	model.addColumn("Customer Name");
	model.addColumn("Cake Item");
	model.addColumn("Quantity");
        model.addColumn("Unit Price");
        model.addColumn("Total");

	for (Order order : orderList) {
            model.addRow(new Object[] {
		order.getOdr_ID(),
		order.getCus_Name(),
                order.getOdr_Item(),
                order.getOdr_Quantity(),
                order.getOdr_unitPrice(),
                order.getOdr_Total()
                    
            });
	}

	orderTable.setModel(model);

    }

    private void clearFields() {
    // Clear text fields
    customerIdTXT.setText("");
    quantityTXT.setText("");
    cakeItemsCOMBOBOX.setSelectedIndex(0); // Reset combo box to default selection
    orderTable.clearSelection(); // Clear table selection
}

    private boolean checkCustomerID(String customerId) {
    try {
        PreparedStatement pst = con.prepareStatement("SELECT * FROM customers WHERE Customer_ID = ?");
        pst.setString(1, customerId);
        ResultSet rs = pst.executeQuery();
        return rs.next(); // Return true if a row with the specified customer ID exists
    } catch (SQLException ex) {
        Logger.getLogger(Orders.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        return false; // Return false in case of an error
    }
}

    // Method to retrieve Customer Name based on Customer ID
    private String getCustomerName(String customerId) {
        String customerName = "";
        try {
            // Prepare the SQL statement to retrieve customer name based on ID
            PreparedStatement pst = con.prepareStatement("SELECT Name FROM customers WHERE Customer_ID = ?");
            pst.setString(1, customerId);

            // Execute the SQL query
            ResultSet rs = pst.executeQuery();

            // Check if any rows are returned
            if (rs.next()) {
                // Retrieve the customer name from the result set
                customerName = rs.getString("Name");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Orders.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
        return customerName;
    }
    
    private String getCustomerID(String customerName) {
    String customerId = null;
    try {
        // Prepare the SQL statement to select the Customer ID based on the Customer Name
        String query = "SELECT Customer_ID FROM customers WHERE Name = ?";
        PreparedStatement pst = con.prepareStatement(query);
        pst.setString(1, customerName);

        // Execute the query
        ResultSet rs = pst.executeQuery();

        // Check if any results were returned
        if (rs.next()) {
            // Retrieve the Customer ID from the result set
            customerId = rs.getString("Customer_ID");
        }
        
        // Close the result set and statement
        rs.close();
        pst.close();
    } catch (SQLException ex) {
        Logger.getLogger(Orders.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    return customerId;
}
    
}
