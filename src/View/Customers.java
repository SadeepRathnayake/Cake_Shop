package View;

import Controller.Icustomer;
import Controller.CustomerImpl;
import Model.Customer;
import Util.databaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sadeep
 */
public class Customers extends javax.swing.JFrame {

    /**
     * Creates new form Customers
     */
    
    PreparedStatement pst;
    ResultSet rs;
    private Connection con;
    
    public Customers() {
        initComponents();
        
        try {
            con = databaseConnection.getDBConnection(); // Initialize the database connection
            table_load();

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error: Unable to connect to the database.");
	}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        numberTXT = new javax.swing.JTextField();
        addressTXT = new javax.swing.JTextField();
        nameTXT = new javax.swing.JTextField();
        INSERTbutton = new javax.swing.JButton();
        UPDATEbutton = new javax.swing.JButton();
        DELETEbutton = new javax.swing.JButton();
        CLEARbutton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        jLabel6.setText("Customer Details");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setText("Address");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel4.setText("Contact Number");

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Name", "Address", "Contact No"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        customerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(customerTable);

        numberTXT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        addressTXT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        nameTXT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        INSERTbutton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        INSERTbutton.setText("INSERT");
        INSERTbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                INSERTbuttonActionPerformed(evt);
            }
        });

        UPDATEbutton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        UPDATEbutton.setText("UPDATE");
        UPDATEbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPDATEbuttonActionPerformed(evt);
            }
        });

        DELETEbutton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        DELETEbutton.setText("DELETE");
        DELETEbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETEbuttonActionPerformed(evt);
            }
        });

        CLEARbutton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CLEARbutton.setText("CLEAR");
        CLEARbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLEARbuttonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(INSERTbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(DELETEbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(UPDATEbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CLEARbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(49, 49, 49))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nameTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(addressTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(numberTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel6)
                        .addGap(50, 50, 50)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(addressTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(numberTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(INSERTbutton)
                            .addComponent(UPDATEbutton))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DELETEbutton)
                    .addComponent(CLEARbutton)
                    .addComponent(backButton))
                .addContainerGap(187, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(885, 411));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        Dashboard Frame = new Dashboard();
        Frame.setVisible(true);
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void INSERTbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_INSERTbuttonActionPerformed
    // INSERT OPERATION

    String name, address, contact;

    // Retrieve data from UI components
    name = nameTXT.getText();
    address = addressTXT.getText();
    contact = numberTXT.getText();

    // Check if any required field is empty
    if (nameTXT.getText().isEmpty() || addressTXT.getText().isEmpty() || numberTXT.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all the required fields.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Validate contact number
    String contactNumber = numberTXT.getText().trim();
    if (!contactNumber.matches("\\d{10}")) {
        JOptionPane.showMessageDialog(this, "Please enter a valid 10-digit contact number.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Create a new customer object
    Customer newCustomer = new Customer();
    newCustomer.setCus_Name(name);
    newCustomer.setCus_Address(address);
    newCustomer.setCus_Number(contactNumber);

    try {
        PreparedStatement pst = con.prepareStatement(
            "INSERT INTO customers (Name, Address, Contact_No) VALUES (?, ?, ?)"
        );

        pst.setString(1, newCustomer.getCus_Name());
        pst.setString(2, newCustomer.getCus_Address());
        pst.setString(3, newCustomer.getCus_Number());

        int rowsInserted = pst.executeUpdate();

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Customer added successfully!");

            // Refresh the table with new data
            table_load();

            // Clear input fields after successful insertion
            clearFields();
            
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add customer.");
        }
    } catch (SQLException ex) {
        Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    
    }//GEN-LAST:event_INSERTbuttonActionPerformed

    private void customerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerTableMouseClicked

        // Get the selected row index
        int rowIndex = customerTable.getSelectedRow();

        // Check if a row is selected
        if (rowIndex != -1) {
            // Get the model from the table
            DefaultTableModel model = (DefaultTableModel) customerTable.getModel();
        
            // Retrieve data from the selected row
            String name = (String) model.getValueAt(rowIndex, 1); // Assuming Name is at column index 1
            String address = (String) model.getValueAt(rowIndex, 2); // Assuming Address is at column index 2
            String contact = (String) model.getValueAt(rowIndex, 3); // Assuming Contact is at column index 3
        
            // Populate the fields with the retrieved data
            nameTXT.setText(name);
            addressTXT.setText(address);
            numberTXT.setText(contact);
        }
    }//GEN-LAST:event_customerTableMouseClicked

    private void UPDATEbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPDATEbuttonActionPerformed
    // UPDATE OPERATION

    String name, address, contact, customerID;

    // Retrieve data from UI components
    name = nameTXT.getText();
    address = addressTXT.getText();
    contact = numberTXT.getText();

    // Check if any required field is empty
    if (nameTXT.getText().isEmpty() || addressTXT.getText().isEmpty() || numberTXT.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all the required fields.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validate contact number
    String contactNumber = numberTXT.getText().trim();
    if (!contactNumber.matches("\\d{10}")) {
        JOptionPane.showMessageDialog(this, "Please enter a valid 10-digit contact number.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Get the selected row index
    int selectedRowIndex = customerTable.getSelectedRow();
    
    // Check if a row is selected
    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(this, "Please select a customer to update.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Retrieve Customer ID from the selected row
    customerID = customerTable.getValueAt(selectedRowIndex, 0).toString();

    // Create a new customer object
    Customer updatedCustomer = new Customer();
    updatedCustomer.setCus_Name(name);
    updatedCustomer.setCus_Address(address);
    updatedCustomer.setCus_Number(contactNumber);
    updatedCustomer.setCus_ID(customerID);

    try {
        PreparedStatement pst = con.prepareStatement(
            "UPDATE customers SET Name = ?, Address = ?, Contact_No = ? WHERE Customer_ID = ?"
        );

        pst.setString(1, updatedCustomer.getCus_Name());
        pst.setString(2, updatedCustomer.getCus_Address());
        pst.setString(3, updatedCustomer.getCus_Number());
        pst.setString(4, updatedCustomer.getCus_ID());

        int rowsUpdated = pst.executeUpdate();

        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Customer updated successfully!");

            // Refresh the table with new data
            table_load();

            // Clear input fields after successful update
            clearFields();
            
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update customer.");
        }
    } catch (SQLException ex) {
        Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    }//GEN-LAST:event_UPDATEbuttonActionPerformed

    private void DELETEbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETEbuttonActionPerformed
    // DELETE OPERATION

    // Get the selected row index from the table
    int selectedRow = customerTable.getSelectedRow();

    // Check if a row is selected
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a customer to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Get the customer ID from the selected row
    String customerID = customerTable.getValueAt(selectedRow, 0).toString(); // Assuming customer ID is in the first column

    // Ask for confirmation before deleting
    int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this customer?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
    
    if (option == JOptionPane.YES_OPTION) {
        try {
            // Prepare the SQL statement to delete the customer record
            PreparedStatement pst = con.prepareStatement("DELETE FROM customers WHERE Customer_ID = ?");
            pst.setString(1, customerID);

            // Execute the SQL statement
            int rowsDeleted = pst.executeUpdate();

            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Customer deleted successfully!");
                // Refresh the table with updated data
                table_load();

                // Clear input fields after successful insertion
                clearFields();
                
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete customer.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_DELETEbuttonActionPerformed

    private void CLEARbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLEARbuttonActionPerformed
        clearFields();
    }//GEN-LAST:event_CLEARbuttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Customers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLEARbutton;
    private javax.swing.JButton DELETEbutton;
    private javax.swing.JButton INSERTbutton;
    private javax.swing.JButton UPDATEbutton;
    private javax.swing.JTextField addressTXT;
    private javax.swing.JButton backButton;
    private javax.swing.JTable customerTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField nameTXT;
    private javax.swing.JTextField numberTXT;
    // End of variables declaration//GEN-END:variables

    // Method to load data into the table
    public void table_load(){

    Icustomer customerImpl = new CustomerImpl();
       	ArrayList<Customer> customerList = customerImpl.getAllCustomer();

	// Convert the ArrayList to a DefaultTableModel
	DefaultTableModel model = new DefaultTableModel();
	model.addColumn("Customer ID");
	model.addColumn("Name");
	model.addColumn("Address");
	model.addColumn("Contact No");

	for (Customer customer : customerList) {
            model.addRow(new Object[] {
		customer.getCus_ID(),
		customer.getCus_Name(),
                customer.getCus_Address(),
                customer.getCus_Number()
            });
	}

	customerTable.setModel(model);

    }

    private void clearFields() {
        // Clear text fields
        nameTXT.setText("");
        addressTXT.setText("");
        numberTXT.setText("");
        customerTable.clearSelection(); // Clear table selection
    }
}
